package Persistence;

import java.net.http.HttpResponse;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;

import org.json.JSONArray;
import org.json.JSONObject;

import Data.Datacollection;
import UserDefinedClasses.StockIntraDayPrices;

public class StoringStockPricesDaily {
	String jdbcUrl;
	String username;
	String password;

	public StoringStockPricesDaily() {
		super();
		this.jdbcUrl = "jdbc:postgresql://localhost:5432/stocks";
		this.username = "postgres";
		this.password = "stocks";
	}

	public void storeDailyPrices(String response) {
		String sql = "INSERT INTO stockprices_intraday(date,time,symbol,tick_open,tick_high,tick_low,tick_close,"
				+ "tick_vol,tick_volavg_price,tick_avg_size,today_open,today_volavg_price,today_acc_vol) values(?,?,?,?,?,?,?,?,?,?,?,?,?);";

		try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

			PreparedStatement preparedStatement = connection.prepareStatement(sql);

			JSONObject res = new JSONObject(response);

			// Extract the array of historical stock data
			JSONArray results = res.getJSONArray("results");

			// Iterate over each entry in the historical stock data array
			for (int i = 0; i < results.length(); i++) {
				JSONObject data = results.getJSONObject(i);

				String ticker = null;
				if (data.has("ticker")) {
					ticker = data.getString("ticker");
				}

				java.sql.Date datesql=null;
				if (data.has("t")) {
					int t = data.getInt("t");
					Instant instant = Instant.ofEpochMilli(t); LocalDateTime 
					localDateTime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);
					LocalDate date=localDateTime.toLocalDate();
					datesql=Date.valueOf(date);
				}

				double open = 0;
				if (data.has("o")) {
					open = data.getInt("o");
				}

				double high = 0;
				if (data.has("h")) {
					high = data.getInt("h");
				}

				double low = 0;
				if (data.has("l")) {
					low = data.getInt("l");
				}
				System.out.println(low);

				double close = 0;
				if (data.has("c")) {
					close = data.getInt("c");
				}

				long vol = 0;
				if (data.has("v")) {
					vol = data.getInt("v");
				}

				double avgvolprice = 0;
				if (data.has("vw")) {
					avgvolprice = data.getInt("vw");
				}

		
				  preparedStatement.setDate(1, datesql); 
			
				  preparedStatement.setString(3, ticker);
				  preparedStatement.setDouble(4, open);
				  preparedStatement.setDouble(5, high);
				  preparedStatement.setDouble(6, low);
				  preparedStatement.setDouble(7, close);
				  preparedStatement.setLong(8, vol);
				 preparedStatement.setDouble(9, avgvolprice);
				 
				  preparedStatement.addBatch();
				  
			
				 } preparedStatement.executeBatch(); System.out.println("Finsished");
		

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}